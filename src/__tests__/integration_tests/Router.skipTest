import React from 'react';
import { render, } from '@testing-library/react';
import { Provider } from 'react-redux'
//import {Route, Switch, Router } from 'react-router-dom'
import { createMemoryHistory } from 'history'


//import {SiteRouter} from '~/index.js';

import { MemoryRouter } from "react-router-dom";
import createStore from '~/data/Store.js'

import {fireEvent, waitForElement } from '@testing-library/react'

import {Route, Switch } from 'react-router-dom'
import {Router as router2 } from 'react-router-dom' 

import {
  Router,
  Link,
  createHistory,
  createMemorySource,
  LocationProvider,
} from '@reach/router'


import { Home } from '~/scenes/Home/Home';
import HomeOld from '~/scenes/Home/HomeOld';
import Search from '~/scenes/Search/Search';
import Metabconcs from '~/scenes/Results/Metabconcs';
import ProteinPage from '~/scenes/Results/ProteinPage';

//import '@testing-library/jest-dom/extend-expect'


jest.useFakeTimers();


let the_json = ""



function SiteRouter2() {
  return (
    <div>
    
    <Router>
      <HomeOld path="/" />
      <Metabconcs
        path="/metabconcs/:molecule/:organism/:abstract?/"
      />
      <ProteinPage
        path="/protein/:searchType/:molecule/:organism?/"
      />
    </Router>
    </div>
  );
};

const store = createStore

function renderWithRouter(
  ui,
  { route = '/', history = createHistory(createMemorySource(route)) } = {}
) {
  return {
    ...render(<LocationProvider history={history}>{ui}</LocationProvider>),
    // adding `history` to the returned utilities to allow us
    // to reference it in our tests (just try to avoid using
    // this to test implementation details).
    history,
  }
}



it('render home page', async () => {
  // Render new instance in every test to prevent leaking state
  const {getByText} =  renderComponent();
  await waitForElement(() => getByText('Protein Concentrations', { exact: false }));

});




it('search for metabolites', async () => {




  const {
    container,
    history: { navigate },
  } = renderWithRouter(<SiteRouter2/>)

  const appContainer = container
  expect(appContainer.innerHTML).toMatch('Protein Concentrations')

  await navigate('/metabconcs/atp/Escherichia coli')
  expect(container.innerHTML).toMatch('4150')


 

});



























/*



it('search for metabolites_old', async () => {




  const {getByText, getByTestId, queryByTestId, container} =  renderComponent();


  //expect(container.innerHTML).toEqual("adsfasd")
  await waitForElement(() => getByTestId('molecule_input'));
  await waitForElement(() => getByTestId('organism_input'));
  await waitForElement(() => getByTestId('search_button'));
  //await queryByTestId(() => queryByTestId('molecule_input'));

  let node = getByTestId('molecule_input')
  fireEvent.change(node, { target: { value: "ATP" } })

  let node2 = getByTestId('organism_input')
  fireEvent.change(node2, { target: { value: "Escherichia coli" } })

  fireEvent.click(getByTestId('search_button'))

  //expect(container.innerHTML).toEqual("adsfasd")
  expect(container.innerHTML).toEqual("")

  expect(global.window.location.pathname).toEqual('/metabconcs/atp/Escherichia coli')

  //jest.runAllTimers()
  

  //await waitForElement(() => expect(queryByTestId('molecule_input')).toBeNull());
  expect(window.location.pathname).toBe('/dsfd/')

});

*/